<!DOCTYPE html>
<html>
  <head>
    <title>Canvas - Dokumentation</title>
    <link rel="stylesheet" type="text/css" href="styles/canvas.css">
  </head>
  
  <body>
    <header>
      <h1>Canvas - Dokumentation</h1>
    </header>
    
    <nav>
      <ul>
        <li><a href="#a">Allgemein</a></li>
        <li><a href="#b">Grundger&uuml;st</a></li>
        <li><a href="#c">Images</a></li>
        <li><a href="#d">Pathes</a></li>
        <li><a href="#e">Gradients</a></li>
        <li><a href="#g">Matrix</a></li>
      </ul>
    </nav>
    
    <section>
      <article id="a">
        <h2>1. Allgemein</h2>
        <p>
          <b>&lt;canvas&gt;</b> (deutsch &quot;Leinwand&quot;) ist ein HTML-Element, das urspr&uuml;nglich ein Bestandteil von Apple's Webkit war und durch die WHATWG in die HTML5 Spezifikation &uuml;bernommen wurde.
          Im Zusammenspiel mit Javascript erm&ouml;glicht es das Rendern von Bildinhalten zur Laufzeit.
        </p>
        
        <p>
          <b>&lt;canvas&gt;</b> verwendet die Funktionalit&auml;t der, durch die Khronos Group definierten, Open Graphics Library for Embedded Systems 2.0. Microsoft trat vor langer Zeit aus der Arbeitsgruppe aus und entwickelte seinen eigenen Standard DirectX.
          Dies k&ouml;nnte einer der vielen Gr&uuml;nde sein, warum erst der Internet Explorer 9 das Element richtig unterst&uuml;tzt.
        </p>
        
        <hgroup>
          <h3>1.1 Legende</h3>
          
          <div class="example"><b>Beispiel</b></div>
          <div class="console"><b>Console</b></div>
          <div class="notice"><b>Merke<b></div>
          <div class="important"><b>Wichtig</b></div>
          <div class="bonus"><b>Bonus</b></div>
          
        </hgroup>
      </article>
      
      <article id="b">
        <h2>2. Grundger&uuml;st</h2>
        <p>
          Minimal wird eine HTML5 Seite mit einem <b>&lt;canvas&gt;</b> im <b>&lt;body&gt;</b> ben&ouml;tigt.
          Mit der Javascript-Funktion &quot;getElementById&quot; kann das <b>&lt;canvas&gt;</b> angesprochen werden.
        </p>
        
        <p>
          Das Stylesheet wird hier ben&ouml;tigt um das <b>&lt;canvas&gt;</b> in der Darstellung hervor zu heben.
          Mit &quot;document.getElementById('canvas')&quot; wird eine Referenz auf das <b>&lt;canvas&gt;</b> in die Variable &quot;can&quot; hinterlegt.
        </p>
        
        <div class="example">
          <p>
            &lt;!DOCTYPE html&gt;<br />
            &lt;html&gt;<br />
            &nbsp;&nbsp;&lt;head&gt;<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas&lt;/title&gt;<br />
            <font>
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #00000; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { background: #FFFFFF; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
            </font>
            &nbsp;&nbsp;&lt;/head&gt;<br />
            <br />
            &nbsp;&nbsp;&lt;body&gt;<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;<br />
            &nbsp;&nbsp;&lt;/body&gt;<br />
            <br />
            &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
            <font>
              &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
            </font>
            &nbsp;&nbsp;&lt;/script&gt;<br />
            &lt;/html&gt;<br />
          </p>
        </div>
        
        <div class="console">
          <canvas id="e1" width="320" height="240"></canvas>
        </div>
        
        <div class="important">
          <p>
            Das <b>&lt;canvas&gt;</b> muss bereits vorhanden sein, bevor das Javascript dieses ansteuern kann.
          </p>
        </div>
        
        <hgroup>
          <h3>2.1 Rendering Context</h3>
          
          <hgroup>
            <h4>getContext(type)</h4>
            <p>
              Mit der Funktion &quot;getContext&quot; erlangt man Zugriff auf das typspezifische Framework und dessen vordefinierten Funktionen.
              Es ist m&ouml;glich sowohl 2D als auch 3D Inhalte gleichzeitig in ein und dem selben <b>&lt;canvas&gt;</b> auszugeben.
            </p>
            
            <p>
              Mit &quot;can.getContext('2d')&quot; wird eine Referenz auf das 2D Framework des <b>&lt;canvas&gt;</b> in der  Variable &quot;ctx&quot; hinterlegt.
            </p>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #00000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                </font>
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;<br />
              </p>
            </div>
            
            <div class="console">
              <canvas id="e2" width="320" height="240"></canvas>
            </div>
            
            <div class="notice">
              <p>
                Da diese Dokumentation f&uuml;r Anf&auml;nger gedacht ist, behandelt sie nur die wichtigsten Aspekte des 2D Frameworks.
              </p>
            </div>
          </hgroup>
        </hgroup>

        <hgroup>
          <h3>2.2 Gr&ouml;&szlig;e / Aufl&ouml;sung</h3>
          <p>
            Die im Stylesheet definierten &quot;width&quot; (deutsch: &quot;Breite&quot;) und &quot;height&quot; (deutsch: &quot;H&ouml;he&quot) geben die Gr&ouml;ße des Darstellungsbereiches vom <b>&lt;canvas&gt;</b> innerhalb der Webseite an.
            Wo hingegen die Attribute &quot;width&quot; und &quot;height&quot; des <b>&lt;canvas&gt;</b> die Anzahl der Pixel (Aufl&ouml;sung) im Darstellungsbereich definieren.
          </p>
          
          <center>
            <img src="images/221.png" />
            <img src="images/222.png" />
          </center>
          
          <div class="example">
            <p>
              &lt;!DOCTYPE html&gt;<br />
              &lt;html&gt;<br />
              &nbsp;&nbsp;&lt;head&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas&lt;/title&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #00000; }<br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
              </font>
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
              &nbsp;&nbsp;&lt;/head&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;body&gt;<br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;640px&quot; height=&quot;480px&quot;&gt;&lt; /canvas&gt;<br />
              </font>
              &nbsp;&nbsp;&lt;/body&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
              &nbsp;&nbsp;&lt;/script&gt;<br />
              &lt;/html&gt;<br />
            </p>
          </div>
          
          <div class="console">
            <canvas id="e3" width="320" height="240"></canvas>
          </div>
          
          <div class="notice">
            <p>
              Die hier unterschiedlichen Werte f&uuml;hren zu einer Verkleinerung des Inhaltes des Darstellungsbereiches um 50 Prozent.
            </p>
          </div>
          
          <div class="important">
            <p>
              Stimmen die Gr&ouml;ße und die Aufl&ouml;sung des Darstellungsbereiches nicht &uuml;berein kommt es zu einer Skalierung.
            </p>
          </div>
        </hgroup>
      </article>
      
      <article id="c">
        <h2>3. Images</h2>
        <p>
          Im allgemeinen dient die Funktion &quot;drawImage&quot; dazu Images (deutsch: &quot;Bilder&quot;) im <b>&lt;canvas&gt;</b> zur Laufzeit zu rendern.
        </p>
        
        <div class="notice">
          <p>
            Koordinaten orientieren sich immer an der linken oberen Ecke.
          </p>
        </div>
        
        <div class="notice">
          <p>
            Es können Images sowie ein <b>&lt;canvas&gt;</b> als Quelle angegeben werden, in jedem Fall bleibt die Funktionalit&auml;t gleich.
          </p>
        </div>
        
        <div class="important">
          <p>
            Beim Parameter &quot;canvas&quot; handelt es sich um das <b>&lt;canvas&gt;</b> und nicht um den Context.
          </p>
        </div>
        
        <hgroup>
          <h3>3.1 drawImage</h3>
          <p>
            Rendert ein Image im Context an die Koordinate &quot;dx,&quot;  / &quot;dy&quot;. 
          </p>
          
          <center>
            <img src="images/310.png" />
          </center>
          
          <hgroup>
            <h4>drawImage(image/canvas, dx, dy)</h4>
            <ul>
              <li><b>Parameter:</b></li>
              <li>image  / canvas = Quellelement</li>
              <li>dx = x - Koordinate im Context</li>
              <li>dy = y - Koordinate im Context</li>
            </ul>
            
            <p>
              Mit &quot;new Image()&quot; wird per Javascript ein neues Image erzeugt und in die Variable &quot;img&quot; abgelegt.
              Durch &quot;img.src&quot; wird die Quelle des Image's definiert und geladen.
              Weil ein Image erst zur Darstellung gebracht werden kann, wenn es vollst&auml;ndig geladen ist, wird das Event &quot;onload&quot; ben&ouml;tigt.
            </p>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;var img = new Image();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;img.src = 'images/300.png';<br />
                  <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;img.onload = function() {<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(this, 20, 20);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;}<br />
                </font>
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e4" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca4 = document.getElementById("e4");
                var ct4 = ca4.getContext("2d");
                
                var im4 = new Image();
                im4.src = "images/300.png";
                
                im4.onload = function() {
                  ct4.drawImage(this, 20, 20);
                }
              </script>
            </div>
            
            <div class="notice">
              <p>
                Ein Image kann erst dargestellt werden, wenn es vollst&auml;ndig geladen ist.
              </p>
            </div>
          </hgroup>
        </hgroup>
        
        <hgroup>
          <h3>3.2 drawImage(scale)</h3>
          <p>
            Rendert ein Image im Context an die Koordinate &quot;dx&quot;  / &quot;dy&quot; mit der Breite &quot;dw&quot; und der H&ouml;he &quot;dh&quot;.
            Bei einer Abweichung der Werte &quot;dw&quot; und &quot;dh&quot; von der Aufl&ouml;sung des Quellbildes, wird dieses entsprechend skaliert.
          </p>
          
          <center>
            <img src="images/320.png" />
          </center>
          
          <hgroup>
            <h4>drawImage(image/canvas, dx, dy, dw, dh)</h4>
            <ul>
              <li><b>Parameter:</b></li>
              <li>image  / canvas = Quellelement</li>
              <li>dx = x - Koordinate im Context</li>
              <li>dy = y - Koordinate im Context</li>
              <li>dw = Breite im Context</li>
              <li>dh = H&ouml;he im Context</li>
            </ul>
            
            <p>
              Mit &quot;new Image()&quot; wird per Javascript ein neues Image erzeugt und in die Variable &quot;img&quot; abgelegt.
              Durch &quot;img.src&quot; wird die Quelle des Image's definiert und geladen.
              Weil ein Image erst zur Darstellung gebracht werden kann, wenn es vollst&auml;ndig geladen ist, wird das Event &quot;onload&quot; ben&ouml;tigt.
              Da sich die hier angegebene H&ouml;he und Breite von den Aufl&ouml;sungswerten des Image's unterscheiden kommt es zur Skalierung.
            </p>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;var img = new Image();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;img.src = 'images/300.png';<br />
                  <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;img.onload = function() {<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(this, 20, 20, 96, 144);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;}<br />
                </font>
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e5" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca5 = document.getElementById("e5");
                var ct5 = ca5.getContext("2d");
                
                var im5 = new Image();
                im5.src = "images/300.png";
                
                im5.onload = function() {
                  ct5.drawImage(this, 20, 20, 96, 144);
                }
              </script>
            </div>
            
            <div class="notice">
              <p>
                Ein Image kann erst dargestellt werden, wenn es vollst&auml;ndig geladen ist.
              </p>
            </div>
            
            <div class="notice">
              <p>
                Wenn H&ouml;he und Breite sich von den Bildwerten unterscheiden, kommt es zur Skalierung.
              </p>
            </div>
          </hgroup>
        </hgroup>
        
        <hgroup>
          <h3>3.3 drawImage(slice)</h3>
          <p>
            Rendert den Ausschnitt eines Image's, definiert durch die Koordinate &quot;sx&quot;  / &quot;sy&quot; mit der Breite &quot;sw&quot; und der H&ouml;he &quot;sh&quot;, im Context an die Koordinate &quot;dx&quot;  / &quot;dy&quot; mit der Breite &quot;dw&quot; und der H&ouml;he &quot;dh&quot;.
            Bei einer Abweichung der Werte &quot;sw&quot; zu &quot;dw&quot; und &quot;sh&quot; zu &quot;dh&quot; wird der Ausschnitt entsprechend skaliert.
          </p>
          
          <center>
            <img src="images/330.png" />
            <img src="images/331.png" />
          </center>
          
          <hgroup>
            <h4>drawImage(image/canvas, sx, sy, sw, sh, dx, dy, dw, dh)</h4>
            <ul>
              <li><b>Parameter:</b></li>
              <li>image  / canvas = Quellelement</li>
              <li>sx = x - Koordinate im Quellelement</li>
              <li>sy = y - Koordinate im Quellelement</li>
              <li>sw = Breite des Ausschnitts</li>
              <li>sh = H&ouml;he des Ausschnitts</li>
              <li>dx = x - Koordinate im Context</li>
              <li>dy = y - Koordinate im Context</li>
              <li>dw = Breite im Context</li>
              <li>dh = H&ouml;he im Context</li>
            </ul>
            
            <p>
              Mit &quot;new Image()&quot; wird per Javascript ein neues Image erzeugt und in die Variable &quot;img&quot; abgelegt.
              Durch &quot;img.src&quot; wird die Quelle des Image's definiert und geladen.
              Weil ein Image erst zur Darstellung gebracht werden kann, wenn es vollst&auml;ndig geladen ist, wird das Event &quot;onload&quot; ben&ouml;tigt.
              Die ersten vier Parameter nach "this" definieren den Ausschnitt, der dargestellt werden soll.
              Anschlie&szlig;end geben die letzten vier Parameter die Position und Gr&ouml;&szlig;e im Context an.
            </p>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;var img = new Image();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;img.src = 'images/300.png';<br />
                  <br />
                  &nbsp;&nbsp;&nbsp;&nbsp;img.onload = function() {<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.drawImage(this, 0, 0, 64, 96, 20, 20, 64, 96);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;}<br />
                </font>
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e6" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca6 = document.getElementById("e6");
                var ct6 = ca6.getContext("2d");
                
                var im6 = new Image();
                im6.src = "images/300.png";
                
                im6.onload = function() {
                  ct6.drawImage(this, 0, 0, 64, 96, 20, 20, 64, 96);
                }
              </script>
            </div>
            
            <div class="notice">
              <p>
                Ein Image kann erst dargestellt werden, wenn es vollst&auml;ndig geladen ist.
              </p>
            </div>
            
            <div class="notice">
              <p>
                Wenn die H&ouml;hen- und Breitenparameter sich unterscheiden kommt es zur Skalierung.
              </p>
            </div>
          </hgroup>
        </hgroup>
      </article>
      
      <article id="d">
        <h2>4. Pathes</h2>
        
        <hgroup>
          <h3>4.1 Basic</h3>
            
          <hgroup>
            <h4>beginPath()</h4>
            <p>
              Er&ouml;ffnet einen neuen Path (deutsch: &quot;Pfad&quot;).
            </p>
            
            <div class="important">
              <p>
                Es musst der letzte Path immer geschlossen werden, um einen neuen zu beginnen.
              </p>
            </div>
          </hgroup>
          
          <hgroup>
            <h4>closePath()</h4>
            <p>
              Schlie&szlig;t den aktuellen Path.
            </p>
          </hgroup>
          
          <hgroup>
            <h4>moveTo(x, y)</h4>
            <p> 
              Positioniert den Anfangspunkt des Path'es an die Koordinate &quot;x&quot; / &quot;y&quot; innerhalb des Contexts.
            </p>
            
            <ul>
              <li><b>Parameter:</b></li>
              <li>x = x - Koordinate im Context</li>
              <li>y = y - Koordinate im Context</li>
            </ul>
            
            <center>
              <img src="images/410.png" />
            </center>
            
            <div class="notice">
              <p>
                W&auml;hrend des Zeichenvorgangs k&ouml;nnen, mit der Funktion &quot;moveTo&quot;, L&uuml;cken innerhalb eines Path'es erzeugt werden.
              </p>
            </div>
          </hgroup>
          
          <hgroup>
            <h4>lineTo(x, y)</h4>
            <p>
              Bezieht sich auf den vorerherigen Ausgangspunkt und definiert eine Linie bis zur Koordinate &quot;x&quot; / &quot;y&quot; innerhalb des Contexts.
            </p>
            
            <ul>
              <li><b>Parameter:</b></li>
              <li>x = x - Koordinate im Context</li>
              <li>y = y - Koordinate im Context</li>
            </ul>
            
            <center>
              <img src="images/410.png" />
            </center>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(20, 20);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(220, 20);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(220, 220);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(20, 220);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
                </font>
                <br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &quot;#000000&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br />
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e7" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca7 = document.getElementById("e7");
                var ct7 = ca7.getContext("2d");
                
                ct7.beginPath();
                ct7.moveTo(20, 20);
                ct7.lineTo(220, 20);
                ct7.lineTo(220, 220);
                ct7.lineTo(20, 220);
                ct7.closePath();
                
                ct7.strokeStyle = "#000000";
                ct7.stroke();
              </script>
            </div>
          </hgroup>
          
          <hgroup class="bonus">
            <h4>quadraticCurveTo(cx, cy, x, y)</h4>
            <p>
              Die Funktion &quot;quadraticCurveTo&quot; bezieht sich auf den vorherigen Ausgangspunkt.
              Mittels Kontrollpunkt wird eine gleichm&auml;&szlig;ige Kurve vom Ausgangspunkt zum Endpunkt berechnet.
              Der Kontrollpunkt gibt die Richtung, in der gezeichnet wird, vor.
            </p>
            
            <ul>
              <li><b>Parameter:</b></li>
              <li>cx = x - Koordinate vom Kontrollpunkt im Context</li>
              <li>cy = y - Koordinate vom Kontrollpunkt im Context</li>
              <li>x = x - Koordinate vom Endpunkt im Context</li>
              <li>y = y - Koordinate vom Endpunkt im Context</li>
            </ul>
            
            <center>
              <img src="images/411.png" />
            </center>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(80, 40);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.quadraticCurveTo(160, 200, 240, 40);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(80, 40);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
                </font>
                <br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &quot;#000000&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br />
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e14" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca14 = document.getElementById("e14");
                var ct14 = ca14.getContext("2d");
                
                ct14.beginPath();
                ct14.moveTo(80, 40);
                ct14.quadraticCurveTo(160, 200, 240, 40);
                ct14.moveTo(80, 40);
                ct14.closePath();
                
                ct14.strokeStyle = "#000000";
                ct14.stroke();
              </script>
            </div>
          </hgroup>
          
          <hgroup class="bonus">
            <h4>bezierCurveTo(cx1, cy1, cx2, cy2, x, y)</h4>
            <p>
              Die Funktion &quot;bezierCurveTo&quot; bezeiht sich auf den vorherigen Ausgangspunkt.
              Mittels zweier Kontrollpunkte wird eine Kurve vom Ausgangspunkt zum Endpunkt berechnet.
              Die Kontrollpunkte geben die Richtung, in der die Linie verl&auml;uft, vor.
            </p>
            
            <ul>
              <li><b>Parameter:</b></li>
              <li>cx1 = x - Koordinate vom ersten Kontrollpunkt im Context</li>
              <li>cy1 = y - Koordinate vom ersten Kontrollpunkt im Context</li>
              <li>cx2 = x - Koordinate vom zweiten Kontrollpunkt im Context</li>
              <li>cy2 = y - Koordinate vom zweiten Kontrollpunkt im Context</li>
              <li>x = x - Koordinate vom Endpunkt im Context</li>
              <li>y = y - Koordinate vom Endpunkt im Context</li>
            </ul>
            
            
            <center>
              <img src="images/412.png" />
            </center>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(80, 120);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.bezierCurveTo(120, 240, 200, 0, 240, 120);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(80, 120);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
                </font>
                <br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &quot;#000000&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br />
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e15" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca15 = document.getElementById("e15");
                var ct15 = ca15.getContext("2d");
                
                ct15.beginPath();
                ct15.moveTo(80, 120);
                ct15.bezierCurveTo(120, 240, 200, 0, 240, 120);
                ct15.moveTo(80, 120);
                ct15.closePath();
                
                ct15.strokeStyle = "#000000";
                ct15.stroke();
              </script>
            </div>
          </hgroup>
        </hgroup>
        
        <hgroup>
          <h3>4.2 Advanced</h3>
          
          <hgroup>
            <h4>rect(x, y, w, h)</h4>
            <p>
              Definiert ein Viereck beginnend an der Koordinate &quot;x&quot; / &quot;y&quot; mit der Breite &quot;w&quot; und der H&ouml;he &quot;h&quot;.
            </p>
            
            <ul>
              <li><b>Parameter:</b></li>
              <li>x = x - Koordinate im Context</li>
              <li>y = y - Koordinate im Context</li>
              <li>w = Breite des Vierecks</li>
              <li>h = H&ouml;he des Vierecks</li>
            </ul>
            
            <center>
              <img src="images/420.png" />
            </center>
            
            <div class="example">
              <p>
                &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.rect(20, 20, 200, 200);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
                </font>
                <br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &quot;#000000&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br />
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
              </p>
            </div>
            
            <div class="console">
              <canvas id="e8" width="320" height="240"></canvas>
              <script type="text/javascript">
                var ca8 = document.getElementById("e8");
                var ct8 = ca8.getContext("2d");
                
                ct8.beginPath();
                ct8.rect(20, 20, 200, 200);
                ct8.closePath();
                
                ct8.strokeStyle = "#000000";
                ct8.stroke();
              </script>
            </div>
            
            <div class="notice">
              <p>
                Koordinaten orientieren sich immer an der linken oberen Ecke.
              </p>
            </div>
          </hgroup>
          
          <hgroup>
            <h4>arc(x, y, r, startAngle, endAngle, anticlockwise)</h4>
            <p>
              Definiert einen Kreis mit dem Radius &quot;r&quot;, dessen Zentrum sich an der Koordinate &quot;x&quot; / &quot;y&quot; befindet.
              Die Parameter &quot;startAngle&quot; und &quot;endAngle&quot; geben den zu zeichnenden Ausschnitt als Winkel in Bogenma&szlig; an.
              Wo hingegen &quot;anticlockwise&quot; die Richtung, in der gezeichnet wird, bestimmt.
            </p>
            
            <ul>
              <li><b>Parameter:</b></li>
              <li>x = x - Koordinate im Context</li>
              <li>y = y - Koordinate im Context</li>
              <li>r = Radius des Kreises</li>
              <li>startAngle = Anfangswinkel in Bogenma&szlig;</li>
              <li>endAngle = Abschlusswinkel in Bogenma&szlig;</li>
              <li>anticlockwise = Richtung in der gezeichnet wird, default: false (Uhrzeigersinn)</li>
            </ul>
          </hgroup>
          
          <center>
            <img src="images/421.png" />
          </center>
          
          <div class="example">
            <p>
              &lt;!DOCTYPE html&gt;<br />
                &lt;html&gt;<br />
                &nbsp;&nbsp;&lt;head&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
                &nbsp;&nbsp;&lt;/head&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;body&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
                &nbsp;&nbsp;&lt;/body&gt;<br />
                <br />
                &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
                <br />
                <font>
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(160, 120, 60, 0, Math.PI * 2, false);<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
                </font>
                <br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &quot;#000000&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br />
                &nbsp;&nbsp;&lt;/script&gt;<br />
                &lt;/html&gt;
            </p>
          </div>
          
          <div class="console">
            <canvas id="e9" width="320" height="240"></canvas>
            <script type="text/javascript">
              var ca9 = document.getElementById("e9");
              var ct9 = ca9.getContext("2d");
              
              ct9.beginPath();
              ct9.arc(160, 120, 60, 0, Math.PI * 2, false);
              ct9.closePath();
              
              ct9.strokeStyle = "#000000";
              ct9.stroke();
            </script>
          </div>
        </hgroup>
        
        <hgroup>
          <h3>4.3 Style</h3>
          
          <hgroup id="da">
            <h4>fillStyle</h4>
            <p>
              Ist eine Attribut des Context und legt den Bef&uuml;llungsstil f&uuml;r die Pathes fest.
            </p>
            
            <div class="notice">
              <p>
                So lange der F&uuml;llstil nicht ge&auml;ndert wird, werden alle Pathes entsprechend der aktuellen Einstellung bef&uuml;llt.
              </p>
            </div>
          </hgroup>
          
          <hgroup>
            <h4>fill()</h4>
            <p>
              Bef&uuml;llt den Path anhand des aktuellen Bef&uuml;llungsstils.
            </p>
          </hgroup>
          
          <hgroup id="db">
            <h4>strokeStyle</h4>
            <p>
              Ist ein Attribut des Context und legt den Linienstil f&uuml;r die Pathes fest.
            </p>
            
            <div class="notice">
              <p>
                So lange der Linienstil nicht ge&auml;ndert wird, werden alle Pathes entsprechend der aktuellen Einstellung gezeichnet.
              </p>
            </div>
          </hgroup>
          
          <hgroup>
            <h4>stroke()</h4>
            <p>
              Zeichnet den Path anhand des aktuellen Linienstils.
            </p>
          </hgroup>
          
          <p>
            Mit &quot;ctx.fillStyle&quot; und &quot;ctx.strokeStyle&quot; werden der Bef&uuml;llungsstil und der Linienstil des <b>&lt;canvas&gt;</b> definiert.
            Die Aufrufe von &quot;ctx.fill&quot; und &quot;ctx.stroke&quot; wenden die Stile auf den zu letzt angelegten Path an.
          </p>
          
          <div class="example">
            <p>
              &lt;!DOCTYPE html&gt;<br />
              &lt;html&gt;<br />
              &nbsp;&nbsp;&lt;head&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
              &nbsp;&nbsp;&lt;/head&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;body&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
              &nbsp;&nbsp;&lt;/body&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.rect(20, 20, 200, 200);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = &quot;#E6E6E6&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
                <br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &quot;#000000&quot;;<br />
                &nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br />
              </font>
              &nbsp;&nbsp;&lt;/script&gt;<br />
              &lt;/html&gt;
            </p>
          </div>
          
          <div class="console">
            <canvas id="e10" width="320" height="240"></canvas>
            <script type="text/javascript">
              var ca10 = document.getElementById("e10");
              var ct10 = ca10.getContext("2d");
              
              ct10.beginPath();
              ct10.rect(20, 20, 200, 200);
              ct10.closePath();
              
              ct10.fillStyle = "#E6E6E6";
              ct10.fill();
              
              ct10.strokeStyle = "#000000";
              ct10.stroke();
            </script>
          </div>
        </hgroup>
      </article>
      
      <article id="e" class="bonus">
        <h2>5. Gradients</h2>
        
        <hgroup>
          <h4>createLinearGradient(x1, y1, x2, y2)</h4>
          <p>
            Erzeugt einen linearen Farbverlauf zwischen zwei Punkten innerhalb des Contexts.
            Der Farbverlauf wird als Stilvorlage (siehe <a href="#da">fillStyle</a> bzw <a href="#db">strokeStyle</a>) f&uuml;r Pathes verwendet.
          </p>
          
          <ul>
            <li><b>Parameter:</b></li>
            <li>x1 = x - Koordinate vom ersten Punkt im Context</li>
            <li>y1 = y - Koordinate vom ersten Punkt im Context</li>
            <li>x2 = x - Koordinate vom zweiten Punkt im Context</li>
            <li>y2 = y - Koordinate vom zweiten Punkt im Context</li>
          </ul>
          
          <p>
            Mit &quot;ctx.createLinearGradient&quot; wird ein linearer Farbverlauf erzeugt und in die Variable &quot;grd&quot; gespeichert.
            Der hier dargestellte Farbverlauf verl&auml;uft von oben links nach unten rechts.
          </p>
          
          <div class="example">
            <p>
              &lt;!DOCTYPE html&gt;<br />
              &lt;html&gt;<br />
              &nbsp;&nbsp;&lt;head&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
              &nbsp;&nbsp;&lt;/head&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;body&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
              &nbsp;&nbsp;&lt;/body&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.rect(20, 20, 200, 200);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;var grd = ctx.createLinearGradient(20, 20, 220, 220);<br />
              </font>
              &nbsp;&nbsp;&nbsp;&nbsp;grd.addColorStop(0, '#0FF000');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;grd.addColorStop(1, '#000FF0');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = grd;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
              &nbsp;&nbsp;&lt;/script&gt;<br />
              &lt;/html&gt;
            </p>
          </div>
          
          <div class="console">
            <canvas id="e11" width="320" height="240"></canvas>
            <script type="text/javascript">
              var ca11 = document.getElementById("e11");
              var ct11 = ca11.getContext("2d");
              
              ct11.beginPath();
              ct11.rect(20, 20, 200, 200);
              ct11.closePath();
              
              var gr11 = ct11.createLinearGradient(20, 20, 220, 220);
              gr11.addColorStop(0, "#0FF000");
              gr11.addColorStop(1, "#000FF0");
              
              ct11.fillStyle = gr11;
              ct11.fill();
            </script>
          </div>
          
          <div class="important">
            <p>
              Farbverl&auml;ufe beziehen sich immer auf einen bestimmten Path, da sie an Koordinaten gebunden sind.
            </p>
          </div>
        </hgroup>
        
        <hgroup>
          <h4>createRadialGradient(x1, y1, r1, x2, y2, r2)</h4>
          <p>
            Erzeugt einen radialen Farbverlauf zwischen dem inneren und &auml;u&szlig;eren Kreis innerhalb des Contexts.
            Bei einem Versatz der Koordinaten vom innnern zum &auml;u&szlig;eren Kreis kommt es zur Fischaugenbildung.
            Der Farbverlauf wird als Stilvorlage (siehe <a href="#da">fillStyle</a> bzw <a href="#db">strokeStyle</a>) f&uuml;r Pathes verwendet.
          </p>
          
          <ul>
            <li><b>Parameter:</b></li>
            <li>x1 = x - Koordinate vom inneren Kreis im Context</li>
            <li>y1 = y - Koordinate vom inneren Kreis im Context</li>
            <li>r1 = Radius innerer Kreis</li>
            <li>x2 = x - Koordinate vom &auml;u&szlig;eren Kreis im Context</li>
            <li>y2 = y - Koordinate vom &auml;u&szlig;eren Kreis im Context</li>
            <li>r2 = Radius &auml;u&szlig;erer Kreis</li>
          </ul>
          
          <p>
            Beim ersten Verlaufsbeispiel stimmen die Koordinaten des inneren und &auml;u&szlig;eren Kreises &uuml;berein.
            Es handelt sich hierbei um einen gleichm&auml;&szlig;igen Farbverlauf, da der innere Radius &quot;0&quot; und der &auml;u&szlig;ere gleich dem Radius vom Path ist.
          </p>
          
          <p>
            Beim zweiten Verlaufsbeispiel stimmen die Koordinaten des inneren und &auml;u&szlig;eren Kreises weiterhin &uuml;berein.
            Da der innere Radius vergr&ouml;&szlig;ert ist, beginnt der Verlauf erst an der Kannte des inneren Kreises und nicht wie zuvor aus dem Zentrum.
          </p>
          
          <p>
            Beim dritten Verlaufsbeispiel sind die Koordinaten des inneren zum &auml;u&szlig;eren Kreis versetzt, es kommt zur sogenannten Fischaugenbildung.
          </p>
          
          <div class="example">
            <p>
              &lt;!DOCTYPE html&gt;<br />
              &lt;html&gt;<br />
              &nbsp;&nbsp;&lt;head&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
              &nbsp;&nbsp;&lt;/head&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;body&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
              &nbsp;&nbsp;&lt;/body&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(80, 120, 60, 0, Math.PI * 2, false);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;var a = ctx.createRadialGradient(80, 120, 0, 80, 120, 60);<br />
              </font>
              &nbsp;&nbsp;&nbsp;&nbsp;a.addColorStop(0, '#0FF000');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;a.addColorStop(1, '#000FF0');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = a;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(160, 120, 60, 0, Math.PI * 2, false);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;var b = ctx.createRadialGradient(160, 120, 30, 160, 120, 60);<br />
              </font>
              &nbsp;&nbsp;&nbsp;&nbsp;b.addColorStop(0, '#0FF000');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;b.addColorStop(1, '#000FF0');<br />
              </font>
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = b;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(240, 120, 60, 0, Math.PI * 2, false);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;var c = ctx.createRadialGradient(270, 120, 30, 240, 120, 60);<br />
              </font>
              &nbsp;&nbsp;&nbsp;&nbsp;c.addColorStop(0, '#0FF000');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;c.addColorStop(1, '#000FF0');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = c;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
              &nbsp;&nbsp;&lt;/script&gt;<br />
              &lt;/html&gt;
            </p>
          </div>
          
          <div class="console">
            <canvas id="e12" width="320" height="240"></canvas>
            <script type="text/javascript">
              var ca12 = document.getElementById("e12");
              var ct12 = ca12.getContext("2d");
              
              ct12.beginPath();
              ct12.arc(80, 120, 60, 0, Math.PI * 2, false);
              ct12.closePath();
              
              var gr12a = ct12.createRadialGradient(80, 120, 0, 80, 120, 60);
              gr12a.addColorStop(0, "#0FF000");
              gr12a.addColorStop(1, "#000FF0");
              
              ct12.fillStyle = gr12a;
              ct12.fill();
              
              ct12.beginPath();
              ct12.arc(160, 120, 60, 0, Math.PI * 2, false);
              ct12.closePath();
              
              var gr12b = ct12.createRadialGradient(160, 120, 30, 160, 120, 60);
              gr12b.addColorStop(0, "#0FF000");
              gr12b.addColorStop(1, "#000FF0");
              
              ct12.fillStyle = gr12b;
              ct12.fill();
              
              ct12.beginPath();
              ct12.arc(240, 120, 60, 0, Math.PI * 2, false);
              ct12.closePath();
              
              var gr12c = ct12.createRadialGradient(270, 120, 30, 240, 120, 60);
              gr12c.addColorStop(0, "#0FF000");
              gr12c.addColorStop(1, "#000FF0");
              
              ct12.fillStyle = gr12c;
              ct12.fill();
            </script>
          </div>
          
          <div class="important">
            <p>
              Farbverl&auml;ufe beziehen sich immer auf einen bestimmten Path, da sie an Koordinaten gebunden sind.
            </p>
          </div>
        </hgroup>
        
        <hgroup>
          <h4>addColorStop(offset, color)</h4>
          <p>
            Die Funktion &quot;addColorStop&quot; wird vom Farbverlauf zur Verf&uuml;gung gestellt und erzeugt einen Verlaufspunkt.
            Der Parameter &quot;offset&quot; ist eine beliebige Kommazahl von 0 bis 1 und gibt die prozentuelle Entfernung vom Verlaufbeginn an.
            Der Parameter &quot;color&quot; definiert den Farbwert am entsprechenden Verlaufpunkt.
            Farbwerte sind vom Typ &quot;String&quot; und werden entweder im Format &quot;HEX&quot; oder &quot;RGBA&quot; angegeben.
          </p>
          
          <ul>
            <li><b>Parameter:</b></li>
            <li>offset = Position vom Verlaufspunkt</li>
            <li>color = Farbwert vom Verlaufspunkt</li>
          </ul>
          
          <p>
            Durch &quot;ctx.createRadialGradient&quot; wird ein radialer Farbverlauf erzeugt und in die Variable &quot;grd&quot; gespeichert.
            Mit &quot;a.addColorStop&quot; f&uuml;gt man dem Farbverlauf einen Verlaufpunkt hinzu.
            In diesem Beispiel wird der erste Verlaufspunkt durch einen &quot;HEX&quot; und der zweite durch einen &quot;RGBA&quot; Farbwert angegeben.
            Das Viereck im Hintergrund dient zur Verdeutlichung der Alphatransparents vom &quot;RGBA&quot; Farbwert.
          </p>
          
          <div class="example">
            <p>
              &lt;!DOCTYPE html&gt;<br />
              &lt;html&gt;<br />
              &nbsp;&nbsp;&lt;head&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas  Dokumentation&lt;/title&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;style type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body { background: #000000; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas { width: 320px; height: 240px; background: #FFFFFF; }<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br />
              &nbsp;&nbsp;&lt;/head&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;body&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;320px&quot; height=&quot;240px&quot;&gt;&lt;/canvas&gt;<br />
              &nbsp;&nbsp;&lt;/body&gt;<br />
              <br />
              &nbsp;&nbsp;&lt;script type=&quot;text/javascript&quot;&gt;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var can = document.getElementById('canvas');<br />
              &nbsp;&nbsp;&nbsp;&nbsp;var ctx = can.getContext('2d');<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.rect(10, 10, 150, 220);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(160, 120, 60, 0, Math.PI * 2, false);<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br />
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;var grd = ctx.createRadialGradient(160, 120, 0, 160, 120, 60);<br />
              <font>
                &nbsp;&nbsp;&nbsp;&nbsp;grd.addColorStop(0, '#0FF000');<br />
                &nbsp;&nbsp;&nbsp;&nbsp;grd.addColorStop(1, 'rgba(0,128,128,0.5)');<br />
              </font>
              <br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = grd;<br />
              &nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br />
              &nbsp;&nbsp;&lt;/script&gt;<br />
              &lt;/html&gt;
            </p>
          </div>
          
          <div class="console">
            <canvas id="e13" width="320" height="240"></canvas>
            <script type="text/javascript">
              var ca13 = document.getElementById("e13");
              var ct13 = ca13.getContext("2d");
              
              ct13.beginPath();
              ct13.rect(10, 10, 150, 220);
              ct13.closePath();
              
              ct13.fillStyle = "#000000";
              ct13.fill();
              
              ct13.beginPath();
              ct13.arc(160, 120, 60, 0, Math.PI * 2, false);
              ct13.closePath();
              
              var gr13 = ct13.createRadialGradient(160, 120, 0, 160, 120, 60);
              gr13.addColorStop(0, "#0FF000");
              gr13.addColorStop(1, "rgba(0,128,128,0.5)");
              
              ct13.fillStyle = gr13;
              ct13.fill();
            </script>
          </div>
          
          <div class="important">
            <p>
              Jeder Farbverlauf muss mindestens die zwei Verlaufpunkte mit dem Offset &quot;0&quot; und &quot;1&quot; besitzen.
            </p>
          </div>
        </hgroup>
      </article>
      
      <article id="g">
        <h2>7. Matrix</h2>
        <table>
          <tr>
            <th>Student</th>
            <th>Allgemein</th>
            <th>Images</th>
            <th>Pathes</th>
            <th>Gradients</th>
            <th>Aufgaben</th>
            <th>Pr&auml;sentation</th>
            <th>Dokumentation</th>
          </tr>
          <tr>
            <td>Fabian Zimmerman</td>
            <td>50%</td>
            <td>75%</td>
            <td>25%</td>
            <td>quadraticCurveTo, addColorStop</td>
            <td>50%</td>
            <td>75%</td>
            <td>25%</td>
          </tr>
          <tr>
            <td>Nico L&ouml;bbert</td>
            <td>50%</td>
            <td>25%</td>
            <td>75%</td>
            <td>bezierCurveTo, addColorStop</td>
            <td>50%</td>
            <td>25%</td>
            <td>75%</td>
          </tr>
        </table>
      </article>
    </section>
    
    <footer>
      <hgroup>
        <h4>Ein Studienprojekt der Fachhochschule K&ouml;ln</h4>
        <p>verfasst von Fabian Zimmermann (11084568) und Nico L&ouml;bbert (11081575), betreut von Volker Sch&auml;fer.</p>
      </hgroup>
      
      <hgroup>
        <h5>Links</h5>
        <ul>
          <li><a href="http://de.wikipedia.org/wiki/WebKit">http://de.wikipedia.org/wiki/WebKit</a></li>
          <li><a href="http://de.wikipedia.org/wiki/Khronos_Group">http://de.wikipedia.org/wiki/Khronos_Group</a></li>
          <li><a href="http://de.wikipedia.org/wiki/OpenGL_ES">http://de.wikipedia.org/wiki/OpenGL_ES</a></li>
        </ul>
      </hgroup>
      
      <hgroup>
        <h5>Quellen</h5>
        <ul>
          <li><a href="http://canvas.quaese.de">http://canvas.quaese.de</a></li>
          <li><a href="http://www.google.de">http://www.google.de</a></li>
        </ul>
      </hgroup>
      
      <hgroup>
        <h5>Beispiele</h5>
        <ul>
          <li><a href="http://playbiolab.com">http://playbiolab.com</a></li>
          <li><a href="http://www.playtankworld.com">http://www.playtankworld.com</a></li>
        </ul>
      </hgroup>
    </footer>
  </body>
</html>